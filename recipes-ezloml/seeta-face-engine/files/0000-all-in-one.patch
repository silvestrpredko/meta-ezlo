diff --git a/FaceAlignment/CMakeLists.txt b/FaceAlignment/CMakeLists.txt
index ed878c8..b4d2288 100644
--- a/FaceAlignment/CMakeLists.txt
+++ b/FaceAlignment/CMakeLists.txt
@@ -3,17 +3,25 @@ cmake_minimum_required(VERSION 2.8.4)
 project(seeta_fa_lib)
 
 # Build options
-option(BUILD_EXAMPLES  "Set to ON to build examples"  ON)
+option(BUILD_EXAMPLES  "Set to ON to build examples"  OFF)
+option(STATIC_OPTION "STATIC_OPTION" ON)
+option(USE_SSE         "USE_SSE"  OFF)
+
+if(STATIC_OPTION)
+        set(BUILD_TYPE "STATIC")
+else()
+        set(BUILD_TYPE "SHARED")
+endif()
 
-# Use C++11
-#set(CMAKE_CXX_STANDARD 11)
-#set(CMAKE_CXX_STANDARD_REQUIRED ON)
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
-message(STATUS "C++11 support has been enabled by default.")
+# Use C++14
+set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")
 
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.1")
+if (USE_SSE)
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.1")
+endif()
 
 include_directories(include)
 
@@ -23,8 +31,9 @@ set(src_files
     src/sift.cpp
     )
 
-add_library(seeta_fa_lib SHARED ${src_files})
-set(fa_required_libs seeta_fa_lib)
+add_library(seeta_fa_lib ${BUILD_TYPE} ${src_files})
+install(TARGETS seeta_fa_lib  DESTINATION lib)
+install(DIRECTORY include/* DESTINATION include)
 
 if (BUILD_EXAMPLES)
     message(STATUS "Build with examples.")
diff --git a/FaceAlignment/src/cfan.cpp b/FaceAlignment/src/cfan.cpp
index 47f09ae..3d65814 100644
--- a/FaceAlignment/src/cfan.cpp
+++ b/FaceAlignment/src/cfan.cpp
@@ -205,7 +205,7 @@ void CCFAN::FacialPointLocate(const unsigned char *gray_im, int im_width, int im
   {
     for (int j = 0; j < pts_num_; j++)
     {
-      if (isnan(fea[j * 128 + i]))
+      if (std::isnan(fea[j * 128 + i]))
       {
         re_fea[i*pts_num_ + j] = 0;
       }
@@ -281,7 +281,7 @@ void CCFAN::FacialPointLocate(const unsigned char *gray_im, int im_width, int im
   {
     for (int j = 0; j < pts_num_; j++)
     {
-      if (isnan(fea[j * 128 + i]))
+      if (std::isnan(fea[j * 128 + i]))
       {
         re_fea[i*pts_num_ + j] = 0;
       }
diff --git a/FaceDetection/CMakeLists.txt b/FaceDetection/CMakeLists.txt
index 6868e05..485ab0c 100644
--- a/FaceDetection/CMakeLists.txt
+++ b/FaceDetection/CMakeLists.txt
@@ -2,17 +2,25 @@ cmake_minimum_required(VERSION 3.1.0)
 
 project(seeta_facedet_lib)
 
+option(STATIC_OPTION "STATIC_OPTION" ON)
+
+if(STATIC_OPTION)
+        set(BUILD_TYPE "STATIC")
+else()
+        set(BUILD_TYPE "SHARED")
+endif()
+
 # Build options
-option(BUILD_EXAMPLES  "Set to ON to build examples"  ON)
+option(BUILD_EXAMPLES  "Set to ON to build examples"  OFF)
 option(USE_OPENMP      "Set to ON to build use openmp"  ON)
-option(USE_SSE         "Set to ON to build use SSE"  ON)
+option(USE_SSE         "Set to ON to build use SSE"  OFF)
 
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")
 
-# Use C++11
-set(CMAKE_CXX_STANDARD 11)
+# Use C++14
+set(CMAKE_CXX_STANDARD 14)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
-message(STATUS "C++11 support has been enabled by default.")
+message(STATUS "C++14 support has been enabled by default.")
 
 # Use SSE
 if (USE_SSE)
@@ -50,7 +58,7 @@ set(src_files
     )
 
 # Build shared library
-add_library(seeta_facedet_lib SHARED ${src_files})
+add_library(seeta_facedet_lib ${BUILD_TYPE} ${src_files})
 set(facedet_required_libs seeta_facedet_lib)
 
 # Build examples
diff --git a/FaceDetection/include/classifier/mlp.h b/FaceDetection/include/classifier/mlp.h
index 4ab6c1e..8cfb326 100644
--- a/FaceDetection/include/classifier/mlp.h
+++ b/FaceDetection/include/classifier/mlp.h
@@ -49,7 +49,7 @@ class MLPLayer {
       : input_dim_(0), output_dim_(0), act_func_type_(act_func_type) {}
   ~MLPLayer() {}
 
-  void Compute(const float* input, float* output);
+  void Compute(const float* input, float* output, size_t outputSize);
 
   inline int32_t GetInputDim() const { return input_dim_; }
   inline int32_t GetOutputDim() const { return output_dim_; }
@@ -101,7 +101,7 @@ class MLP {
   MLP() {}
   ~MLP() {}
 
-  void Compute(const float* input, float* output);
+  void Compute(const float* input, float* output, size_t outputSize);
 
   inline int32_t GetInputDim() const {
     return layers_[0]->GetInputDim();
diff --git a/FaceDetection/src/classifier/lab_boosted_classifier.cpp b/FaceDetection/src/classifier/lab_boosted_classifier.cpp
index b986911..22f8bb8 100644
--- a/FaceDetection/src/classifier/lab_boosted_classifier.cpp
+++ b/FaceDetection/src/classifier/lab_boosted_classifier.cpp
@@ -49,8 +49,12 @@ bool LABBoostedClassifier::Classify(float* score, float* outputs) {
 
   for (size_t i = 0; isPos && i < base_classifiers_.size();) {
     for (int32_t j = 0; j < kFeatGroupSize; j++, i++) {
-      uint8_t featVal = feat_map_->GetFeatureVal(feat_[i].x, feat_[i].y);
-      s += base_classifiers_[i]->weights(featVal);
+      if (i < feat_.size())
+	{
+	      uint8_t featVal = feat_map_->GetFeatureVal(feat_[i].x, feat_[i].y);
+	      s += base_classifiers_[i]->weights(featVal);
+	}
+
     }
     if (s < base_classifiers_[i - 1]->threshold())
       isPos = false;
diff --git a/FaceDetection/src/classifier/mlp.cpp b/FaceDetection/src/classifier/mlp.cpp
index 4867101..7f7ab6f 100644
--- a/FaceDetection/src/classifier/mlp.cpp
+++ b/FaceDetection/src/classifier/mlp.cpp
@@ -36,28 +36,31 @@
 namespace seeta {
 namespace fd {
 
-void MLPLayer::Compute(const float* input, float* output) {
+void MLPLayer::Compute(const float* input, float* output, size_t outputSize) {
 #pragma omp parallel num_threads(SEETA_NUM_THREADS)
   {
 #pragma omp for nowait
     for (int32_t i = 0; i < output_dim_; i++) {
-      output[i] = seeta::fd::MathFunction::VectorInnerProduct(input,
-        weights_.data() + i * input_dim_, input_dim_) + bias_[i];
-      output[i] = (act_func_type_ == 1 ? ReLU(output[i]) : Sigmoid(-output[i]));
+	if (bias_.size() > i && i < outputSize)
+	{
+	      output[i] = seeta::fd::MathFunction::VectorInnerProduct(input,
+		weights_.data() + i * input_dim_, input_dim_) + bias_[i];
+	      output[i] = (act_func_type_ == 1 ? ReLU(output[i]) : Sigmoid(-output[i]));
+	}
     }
   }
 }
 
-void MLP::Compute(const float* input, float* output) {
+void MLP::Compute(const float* input, float* output, size_t outputSize) {
   layer_buf_[0].resize(layers_[0]->GetOutputDim());
-  layers_[0]->Compute(input, layer_buf_[0].data());
+  layers_[0]->Compute(input, layer_buf_[0].data(), layer_buf_[0].size());
 
   size_t i; /**< layer index */
   for (i = 1; i < layers_.size() - 1; i++) {
     layer_buf_[i % 2].resize(layers_[i]->GetOutputDim());
-    layers_[i]->Compute(layer_buf_[(i + 1) % 2].data(), layer_buf_[i % 2].data());
+    layers_[i]->Compute(layer_buf_[(i + 1) % 2].data(), layer_buf_[i % 2].data(), layer_buf_[i % 2].size());
   }
-  layers_.back()->Compute(layer_buf_[(i + 1) % 2].data(), output);
+  layers_.back()->Compute(layer_buf_[(i + 1) % 2].data(), output, outputSize);
 }
 
 void MLP::AddLayer(int32_t inputDim, int32_t outputDim, const float* weights,
diff --git a/FaceDetection/src/classifier/surf_mlp.cpp b/FaceDetection/src/classifier/surf_mlp.cpp
index 00c2681..e3bd182 100644
--- a/FaceDetection/src/classifier/surf_mlp.cpp
+++ b/FaceDetection/src/classifier/surf_mlp.cpp
@@ -43,7 +43,7 @@ bool SURFMLP::Classify(float* score, float* outputs) {
     dest += feat_map_->GetFeatureVectorDim(feat_id_[i]);
   }
   output_buf_.resize(model_->GetOutputDim());
-  model_->Compute(input_buf_.data(), output_buf_.data());
+  model_->Compute(input_buf_.data(), output_buf_.data(), output_buf_.size());
 
   if (score != nullptr)
     *score = output_buf_[0];
diff --git a/FaceIdentification/CMakeLists.txt b/FaceIdentification/CMakeLists.txt
index 7c03b7c..682c4db 100644
--- a/FaceIdentification/CMakeLists.txt
+++ b/FaceIdentification/CMakeLists.txt
@@ -2,12 +2,23 @@ cmake_minimum_required (VERSION 2.6)
 
 project (viplnet)
 
+option(STATIC_OPTION "STATIC_OPTION" ON)
+
+if(STATIC_OPTION)
+        set(BUILD_TYPE "STATIC")
+else()
+        set(BUILD_TYPE "SHARED")
+endif()
+
+
 set (VIPLNET_VERSION_MAJOR 4)
 set (VIPLNET_VERSION_MINOR 5)
 
 set(CMAKE_BUILD_TYPE "Release")
-set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -std=c++11 -O2 -g -ggdb")
-set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -std=c++11 -O2")
+
+# Use C++14
+set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
 MESSAGE(STATUS "other platform: ${CMAKE_SYSTEM_NAME}")
 
@@ -28,7 +39,7 @@ add_subdirectory(src)
 
 aux_source_directory(./src SRC_LIST)
 aux_source_directory(./tools TOOLS_LIST)
-add_library(viplnet SHARED ${SRC_LIST} ${TOOLS_LIST})
+add_library(viplnet ${BUILD_TYPE} ${SRC_LIST} ${TOOLS_LIST})
 set_target_properties(viplnet PROPERTIES 
   VERSION ${VIPLNET_VERSION_MAJOR}.${VIPLNET_VERSION_MINOR} 
   SOVERSION ${VIPLNET_VERSION_MAJOR}.${VIPLNET_VERSION_MINOR}) 
diff --git a/FaceIdentification/include/face_identification.h b/FaceIdentification/include/face_identification.h
index b1520af..bd686a2 100644
--- a/FaceIdentification/include/face_identification.h
+++ b/FaceIdentification/include/face_identification.h
@@ -45,7 +45,9 @@ public:
   // For identification, you need to create a 'FaceIdentification' object with \
   the path of identification model, or call function 'LoadModel' after create  \
   an object.
-  SEETA_API FaceIdentification(const char* model_path = nullptr);
+  SEETA_API FaceIdentification(const char* model_path);
+
+  SEETA_API FaceIdentification();
 
   SEETA_API ~FaceIdentification();
 
@@ -85,6 +87,13 @@ public:
       const FacialLandmark *llpoint,
       FaceFeatures const feats);
 
+//LEVENT Update...
+SEETA_API uint8_t  AllignWithCrop(                        
+                                const ImageData &src_image, 
+                                const FacialLandmark* llpoint, 
+                                ImageData &dst_img
+                                );
+
   // Calculate similarity of face features fc1 and fc2.
   // dim = -1 default feature size
   SEETA_API float CalcSimilarity(FaceFeatures const fc1,
diff --git a/FaceIdentification/include/recognizer.h b/FaceIdentification/include/recognizer.h
index 4b7056f..ee0c78a 100644
--- a/FaceIdentification/include/recognizer.h
+++ b/FaceIdentification/include/recognizer.h
@@ -64,6 +64,9 @@ public:
     }
   }
 
+  Recognizer(int i) {
+  }
+
   ~Recognizer() {
   }
 
@@ -106,6 +109,7 @@ public:
       float* const points, float* const feat) {
     // crop
     Blob crop_blob;
+    crop_blob.data();
     aligner_->Alignment(src_img, points, &crop_blob);
     // extract feature
     net_->input_blobs(0)->SetData(crop_blob);
@@ -116,6 +120,29 @@ public:
 	return 1;
   }
 
+  ///LEVENT
+  uint8_t AllignWithCrop(const ImageData &src_img, float* const points, ImageData &dst_img) 
+  {
+    // crop
+    Blob crop_blob;
+    crop_blob.data();
+    
+ 
+    aligner_->Alignment(src_img, points, &crop_blob);
+
+ 
+    dst_img.height=crop_blob.height();
+    dst_img.width=crop_blob.width();
+    dst_img.num_channels=crop_blob.channels();
+    dst_img.data=(uint8_t*)malloc(dst_img.width*dst_img.height*2);
+      
+    crop_blob.Permute(1, 3, 4, 2);
+	  crop_blob.CopyTo(dst_img.data);
+
+	  return 1;
+  }
+
+
   uint8_t ExtractFeature(unsigned char* const u_data, uint16_t* const feat) {
 	//To do: compress features 
     return 1;
diff --git a/FaceIdentification/src/CMakeLists.txt b/FaceIdentification/src/CMakeLists.txt
index ac25ae7..c06ae51 100644
--- a/FaceIdentification/src/CMakeLists.txt
+++ b/FaceIdentification/src/CMakeLists.txt
@@ -1,2 +1,2 @@
-set(VIPLNET_TEST_DIR ${PROJECT_SRC_DIR}/test)
-add_subdirectory(test)
+#set(VIPLNET_TEST_DIR ${PROJECT_SRC_DIR}/test)
+#add_subdirectory(test)
diff --git a/FaceIdentification/src/math_functions.cpp b/FaceIdentification/src/math_functions.cpp
index ec13962..72fe29c 100644
--- a/FaceIdentification/src/math_functions.cpp
+++ b/FaceIdentification/src/math_functions.cpp
@@ -30,18 +30,26 @@
  */
 
 #include "math_functions.h"
-#include <xmmintrin.h>
 #include <cstdint>
 
-#ifdef _WIN32
-#include <intrin.h>
-#else
-#include <x86intrin.h>
+#if defined(_MSC_VER)
+/* Microsoft C/C++-compatible compiler */
+     #include <intrin.h>
+#elif defined(__GNUC__) && (defined(__x86_64__) || defined(__i386__))
+/* GCC-compatible compiler, targeting x86/x86-64 */
+     #include <x86intrin.h>
+#elif defined(__GNUC__) && defined(__ARM_NEON__)
+/* GCC-compatible compiler, targeting ARM with NEON */
+     #include <arm_neon.h>
 #endif
 
+
+
+#if defined(__GNUC__) && (defined(__x86_64__) || defined(__i386__) || defined(_MSC_VER) )
 float simd_dot(const float* x, const float* y, const long& len) {
+ #pragma message("USE SSE")
   float inner_prod = 0.0f;
-  __m128 X, Y; // 128-bit values
+  __m128 X,Y,Z; // 128-bit values
   __m128 acc = _mm_setzero_ps(); // set to (0, 0, 0, 0)
   float temp[4];
 
@@ -49,7 +57,8 @@ float simd_dot(const float* x, const float* y, const long& len) {
   for (i = 0; i + 4 < len; i += 4) {
       X = _mm_loadu_ps(x + i); // load chunk of 4 floats
       Y = _mm_loadu_ps(y + i);
-      acc = _mm_add_ps(acc, _mm_mul_ps(X, Y));
+      Z = _mm_mul_ps(X, Y);
+      acc = _mm_add_ps(acc, Z);
   }
   _mm_storeu_ps(&temp[0], acc); // store acc into an array
   inner_prod = temp[0] + temp[1] + temp[2] + temp[3];
@@ -60,6 +69,27 @@ float simd_dot(const float* x, const float* y, const long& len) {
   }
   return inner_prod;
 }
+#else
+float simd_dot(const float* x, const float* y, const long& len) {
+#pragma message("USE NEON")
+    float inner_prod=0.0f;
+    float32x4_t X,Y,Z;// 128-bit values
+    float32x4_t acc=vdupq_n_f32(0.0f);//set to (0, 0, 0, 0)
+    long i;
+    for (i = 0; i + 4 < len; i += 4) {
+        X = vld1q_f32(x + i);// load chunk of 4 floats
+        Y = vld1q_f32(y + i);
+        Z = vmulq_f32(X, Y);
+        acc = vaddq_f32(acc, Z);
+    }
+    inner_prod=vgetq_lane_f32(acc, 0)+vgetq_lane_f32(acc, 1)+vgetq_lane_f32(acc, 2) +vgetq_lane_f32(acc, 3);
+    for (; i < len; ++i) {
+        inner_prod += x[i] * y[i];
+    }
+    return inner_prod;
+}
+#endif
+
 
 void matrix_procuct(const float* A, const float* B, float* C, const int n,
     const int m, const int k, bool ta, bool tb) {
diff --git a/FaceIdentification/src/test/CMakeLists.txt b/FaceIdentification/src/test/CMakeLists.txt
index c117090..b93910a 100644
--- a/FaceIdentification/src/test/CMakeLists.txt
+++ b/FaceIdentification/src/test/CMakeLists.txt
@@ -1,14 +1,14 @@
-aux_source_directory (. SRC_LIST)
+#aux_source_directory (. SRC_LIST)
 
-message(${SRC_LIST})
+#message(${SRC_LIST})
 
 # add external libraries
-find_package(OpenCV REQUIRED)
-
-enable_testing ()
-foreach (f ${SRC_LIST})
-  string(REGEX REPLACE "[.]cpp" ".bin" BIN ${f})
-  add_executable(${BIN} ${f})
-  target_link_libraries(${BIN} viplnet ${OpenCV_LIBS})
-endforeach ()
+#find_package(OpenCV REQUIRED)
+
+#enable_testing ()
+#foreach (f ${SRC_LIST})
+#  string(REGEX REPLACE "[.]cpp" ".bin" BIN ${f})
+#  add_executable(${BIN} ${f})
+#  target_link_libraries(${BIN} viplnet ${OpenCV_LIBS})
+#endforeach ()
 
diff --git a/FaceIdentification/src/test/test_face_recognizer.cpp b/FaceIdentification/src/test/test_face_recognizer.cpp
index cc28869..4e84743 100644
--- a/FaceIdentification/src/test/test_face_recognizer.cpp
+++ b/FaceIdentification/src/test/test_face_recognizer.cpp
@@ -29,260 +29,7 @@
  *
  */
 
-#include<iostream>
-using namespace std;
-
-#ifdef _WIN32
-#pragma once
-#include <opencv2/core/version.hpp>
-
-#define CV_VERSION_ID CVAUX_STR(CV_MAJOR_VERSION) CVAUX_STR(CV_MINOR_VERSION) \
-  CVAUX_STR(CV_SUBMINOR_VERSION)
-
-#ifdef _DEBUG
-#define cvLIB(name) "opencv_" name CV_VERSION_ID "d"
-#else
-#define cvLIB(name) "opencv_" name CV_VERSION_ID
-#endif //_DEBUG
-
-#pragma comment( lib, cvLIB("core") )
-#pragma comment( lib, cvLIB("imgproc") )
-#pragma comment( lib, cvLIB("highgui") )
-
-#endif //_WIN32
-
-#if defined(__unix__) || defined(__APPLE__)
-
-#ifndef fopen_s
-
-#define fopen_s(pFile,filename,mode) ((*(pFile))=fopen((filename),(mode)))==NULL
-
-#endif //fopen_s
-
-#endif //__unix
-
-
-#include <opencv/cv.h>
-#include <opencv/highgui.h>
-
-#include "face_identification.h"
-#include "common.h"
-
-#include "math.h"
-#include "time.h"
-#include <iostream>
-#include <fstream>
-#include <string>
-#include <vector>
-
-#include <stdlib.h>
-#include <stdio.h>
-
-#include "ctime"
-
-using namespace seeta;
-
-#define TEST(major, minor) major##_##minor##_Tester()
-#define EXPECT_NE(a, b) if ((a) == (b)) std::cout << "ERROR: "
-#define EXPECT_EQ(a, b) if ((a) != (b)) std::cout << "ERROR: "
-
-#ifdef _WIN32
-std::string DATA_DIR = "../../data/";
-std::string MODEL_DIR = "../../model/";
-#else
-std::string DATA_DIR = "./data/";
-std::string MODEL_DIR = "./model/";
-#endif
-void TEST(FaceRecognizerTest, CropFace) {
-  FaceIdentification face_recognizer((MODEL_DIR + "seeta_fr_v1.0.bin").c_str());
-  std::string test_dir = DATA_DIR + "test_face_recognizer/";
-  /* data initialize */
-  std::ifstream ifs;
-  std::string img_name;
-  FacialLandmark pt5[5];
-  ifs.open(test_dir + "test_file_list.txt", std::ifstream::in);
-  clock_t start, count = 0;
-  int img_num = 0;
-  while (ifs >> img_name) {
-    img_num ++ ;
-    // read image
-    cv::Mat src_img = cv::imread(test_dir + img_name, 1);
-    EXPECT_NE(src_img.data, nullptr) << "Load image error!";
-
-    // ImageData store data of an image without memory alignment.
-    ImageData src_img_data(src_img.cols, src_img.rows, src_img.channels());
-    src_img_data.data = src_img.data;
-
-    // 5 located landmark points (left eye, right eye, nose, left and right 
-    // corner of mouse).
-    for (int i = 0; i < 5; ++ i) {
-      ifs >> pt5[i].x >> pt5[i].y;
-    }
-
-    // Create a image to store crop face.
-    cv::Mat dst_img(face_recognizer.crop_height(),
-      face_recognizer.crop_width(),
-      CV_8UC(face_recognizer.crop_channels()));
-    ImageData dst_img_data(dst_img.cols, dst_img.rows, dst_img.channels());
-    dst_img_data.data = dst_img.data;
-    /* Crop Face */
-    start = clock();
-    face_recognizer.CropFace(src_img_data, pt5, dst_img_data);
-    count += clock() - start;
-    // Show crop face
-    //    cv::imshow("Crop Face", dst_img);
-    //    cv::waitKey(0);
-    //    cv::destroyWindow("Crop Face");
-  }
-  ifs.close();
-  std::cout << "Test successful! \nAverage crop face time: "
-    << 1000.0 * count / CLOCKS_PER_SEC / img_num << "ms" << std::endl;
-}
-
-void TEST(FaceRecognizerTest, ExtractFeature) {
-  FaceIdentification face_recognizer((MODEL_DIR + "seeta_fr_v1.0.bin").c_str());
-  std::string test_dir = DATA_DIR + "test_face_recognizer/";
-
-  int feat_size = face_recognizer.feature_size();
-  EXPECT_EQ(feat_size, 2048);
-
-  FILE* feat_file = NULL;
-
-  // Load features extract from caffe
-  fopen_s(&feat_file, (test_dir + "feats.dat").c_str(), "rb");
-  int n, c, h, w;
-  EXPECT_EQ(fread(&n, sizeof(int), 1, feat_file), (unsigned int)1);
-  EXPECT_EQ(fread(&c, sizeof(int), 1, feat_file), (unsigned int)1);
-  EXPECT_EQ(fread(&h, sizeof(int), 1, feat_file), (unsigned int)1);
-  EXPECT_EQ(fread(&w, sizeof(int), 1, feat_file), (unsigned int)1);
-  float* feat_caffe = new float[n * c * h * w];
-  float* feat_sdk = new float[n * c * h * w];
-  EXPECT_EQ(fread(feat_caffe, sizeof(float), n * c * h * w, feat_file),
-    n * c * h * w);
-  EXPECT_EQ(feat_size, c * h * w);
-
-  int cnt = 0;
-
-  /* Data initialize */
-  std::ifstream ifs(test_dir + "crop_file_list.txt");
-  std::string img_name;
-
-  clock_t start, count = 0;
-  int img_num = 0, lb;
-  double average_sim = 0.0;
-  while (ifs >> img_name >> lb) {
-    // read image
-    cv::Mat src_img = cv::imread(test_dir + img_name, 1);
-    EXPECT_NE(src_img.data, nullptr) << "Load image error!";
-    cv::resize(src_img, src_img, cv::Size(face_recognizer.crop_height(),
-      face_recognizer.crop_width()));
-
-    // ImageData store data of an image without memory alignment.
-    ImageData src_img_data(src_img.cols, src_img.rows, src_img.channels());
-    src_img_data.data = src_img.data;
-
-    /* Extract feature */
-    start = clock();
-    face_recognizer.ExtractFeature(src_img_data,
-      feat_sdk + img_num * feat_size);
-    count += clock() - start;
-
-    /* Caculate similarity*/
-    float* feat1 = feat_caffe + img_num * feat_size;
-    float* feat2 = feat_sdk + img_num * feat_size;
-    float sim = face_recognizer.CalcSimilarity(feat1, feat2);
-    average_sim += sim;
-    img_num ++ ;
-  }
-  ifs.close();
-  average_sim /= img_num;
-  if (1.0 - average_sim >  0.01) {
-    std::cout<< "average similarity: " << average_sim << std::endl;
-  }
-  else {
-    std::cout << "Test successful!\nAverage extract feature time: "
-      << 1000.0 * count / CLOCKS_PER_SEC / img_num << "ms" << std::endl;
-  }
-  delete []feat_caffe;
-  delete []feat_sdk;
-}
-
-void TEST(FaceRecognizerTest, ExtractFeatureWithCrop) {
-  FaceIdentification face_recognizer((MODEL_DIR + "seeta_fr_v1.0.bin").c_str());
-  std::string test_dir = DATA_DIR + "test_face_recognizer/";
-
-  int feat_size = face_recognizer.feature_size();
-  EXPECT_EQ(feat_size, 2048);
-
-  FILE* feat_file = NULL;
-
-  // Load features extract from caffe
-  fopen_s(&feat_file, (test_dir + "feats.dat").c_str(), "rb");
-  int n, c, h, w;
-  EXPECT_EQ(fread(&n, sizeof(int), 1, feat_file), (unsigned int)1);
-  EXPECT_EQ(fread(&c, sizeof(int), 1, feat_file), (unsigned int)1);
-  EXPECT_EQ(fread(&h, sizeof(int), 1, feat_file), (unsigned int)1);
-  EXPECT_EQ(fread(&w, sizeof(int), 1, feat_file), (unsigned int)1);
-  float* feat_caffe = new float[n * c * h * w];
-  float* feat_sdk = new float[n * c * h * w];
-  EXPECT_EQ(fread(feat_caffe, sizeof(float), n * c * h * w, feat_file),
-    n * c * h * w);
-  EXPECT_EQ(feat_size, c * h * w);
-
-  int cnt = 0;
-
-  /* Data initialize */
-  std::ifstream ifs(test_dir + "test_file_list.txt");
-  std::string img_name;
-  FacialLandmark pt5[5];
-
-  clock_t start, count = 0;
-  int img_num = 0;
-  double average_sim = 0.0;
-  while (ifs >> img_name) {
-    // read image
-    cv::Mat src_img = cv::imread(test_dir + img_name, 1);
-    EXPECT_NE(src_img.data, nullptr) << "Load image error!";
-
-    // ImageData store data of an image without memory alignment.
-    ImageData src_img_data(src_img.cols, src_img.rows, src_img.channels());
-    src_img_data.data = src_img.data;
-
-    // 5 located landmark points (left eye, right eye, nose, left and right 
-    // corner of mouse).
-    for (int i = 0; i < 5; ++ i) {
-      ifs >> pt5[i].x >> pt5[i].y;
-    }
-
-    /* Extract feature: ExtractFeatureWithCrop */
-    start = clock();
-    face_recognizer.ExtractFeatureWithCrop(src_img_data, pt5,
-      feat_sdk + img_num * feat_size);
-    count += clock() - start;
-
-    /* Caculate similarity*/
-    float* feat1 = feat_caffe + img_num * feat_size;
-    float* feat2 = feat_sdk + img_num * feat_size;
-    float sim = face_recognizer.CalcSimilarity(feat1, feat2);
-    average_sim += sim;
-    img_num ++ ;
-  }
-  ifs.close();
-  average_sim /= img_num;
-  if (1.0 - average_sim >  0.02) {
-    std::cout<< "average similarity: " << average_sim << std::endl;
-  }
-  else {
-    std::cout << "Test successful!\nAverage extract feature time: "
-      << 1000.0 * count / CLOCKS_PER_SEC / img_num << "ms" << std::endl;
-  }
-  delete []feat_caffe;
-  delete []feat_sdk;
-}
-
-int main(int argc, char* argv[]) {
-  TEST(FaceRecognizerTest, CropFace);
-  TEST(FaceRecognizerTest, ExtractFeature);
-  TEST(FaceRecognizerTest, ExtractFeatureWithCrop);
+int main()
+{
   return 0;
-}
+}
\ No newline at end of file
diff --git a/FaceIdentification/src/test/test_face_verification.cpp b/FaceIdentification/src/test/test_face_verification.cpp
index b30dc41..c7e5d64 100644
--- a/FaceIdentification/src/test/test_face_verification.cpp
+++ b/FaceIdentification/src/test/test_face_verification.cpp
@@ -29,144 +29,10 @@
 *
 */
 
-#include<iostream>
-using namespace std;
 
-#ifdef _WIN32
-#pragma once
-#include <opencv2/core/version.hpp>
 
-#define CV_VERSION_ID CVAUX_STR(CV_MAJOR_VERSION) CVAUX_STR(CV_MINOR_VERSION) \
-  CVAUX_STR(CV_SUBMINOR_VERSION)
-
-#ifdef _DEBUG
-#define cvLIB(name) "opencv_" name CV_VERSION_ID "d"
-#else
-#define cvLIB(name) "opencv_" name CV_VERSION_ID
-#endif //_DEBUG
-
-#pragma comment( lib, cvLIB("core") )
-#pragma comment( lib, cvLIB("imgproc") )
-#pragma comment( lib, cvLIB("highgui") )
-
-#endif //_WIN32
-
-#if defined(__unix__) || defined(__APPLE__)
-
-#ifndef fopen_s
-
-#define fopen_s(pFile,filename,mode) ((*(pFile))=fopen((filename),(mode)))==NULL
-
-#endif //fopen_s
-
-#endif //__unix
-
-#include <opencv/cv.h>
-#include <opencv/highgui.h>
-#include "face_identification.h"
-#include "recognizer.h"
-#include "face_detection.h"
-#include "face_alignment.h"
-
-#include "math_functions.h"
-
-#include <vector>
-#include <string>
-#include <iostream>
-#include <algorithm>
-
-using namespace seeta;
-
-#define TEST(major, minor) major##_##minor##_Tester()
-#define EXPECT_NE(a, b) if ((a) == (b)) std::cout << "ERROR: "
-#define EXPECT_EQ(a, b) if ((a) != (b)) std::cout << "ERROR: "
-
-#ifdef _WIN32
-std::string DATA_DIR = "../../data/";
-std::string MODEL_DIR = "../../model/";
-#else
-std::string DATA_DIR = "./data/";
-std::string MODEL_DIR = "./model/";
-#endif
-
-
-int main(int argc, char* argv[]) {
-  // Initialize face detection model
-  seeta::FaceDetection detector("seeta_fd_frontal_v1.0.bin");
-  detector.SetMinFaceSize(40);
-  detector.SetScoreThresh(2.f);
-  detector.SetImagePyramidScaleFactor(0.8f);
-  detector.SetWindowStep(4, 4);
-
-  // Initialize face alignment model 
-  seeta::FaceAlignment point_detector("seeta_fa_v1.1.bin");
-
-  // Initialize face Identification model 
-  FaceIdentification face_recognizer((MODEL_DIR + "seeta_fr_v1.0.bin").c_str());
-  std::string test_dir = DATA_DIR + "test_face_recognizer/";
-
-  //load image
-  cv::Mat gallery_img_color = cv::imread(test_dir + "images/compare_im/Aaron_Peirsol_0001.jpg", 1);
-  cv::Mat gallery_img_gray;
-  cv::cvtColor(gallery_img_color, gallery_img_gray, CV_BGR2GRAY);
-
-  cv::Mat probe_img_color = cv::imread(test_dir + "images/compare_im/Aaron_Peirsol_0004.jpg", 1);
-  cv::Mat probe_img_gray;
-  cv::cvtColor(probe_img_color, probe_img_gray, CV_BGR2GRAY);
-
-  ImageData gallery_img_data_color(gallery_img_color.cols, gallery_img_color.rows, gallery_img_color.channels());
-  gallery_img_data_color.data = gallery_img_color.data;
-
-  ImageData gallery_img_data_gray(gallery_img_gray.cols, gallery_img_gray.rows, gallery_img_gray.channels());
-  gallery_img_data_gray.data = gallery_img_gray.data;
-
-  ImageData probe_img_data_color(probe_img_color.cols, probe_img_color.rows, probe_img_color.channels());
-  probe_img_data_color.data = probe_img_color.data;
-
-  ImageData probe_img_data_gray(probe_img_gray.cols, probe_img_gray.rows, probe_img_gray.channels());
-  probe_img_data_gray.data = probe_img_gray.data;
-
-  // Detect faces
-  std::vector<seeta::FaceInfo> gallery_faces = detector.Detect(gallery_img_data_gray);
-  int32_t gallery_face_num = static_cast<int32_t>(gallery_faces.size());
-
-  std::vector<seeta::FaceInfo> probe_faces = detector.Detect(probe_img_data_gray);
-  int32_t probe_face_num = static_cast<int32_t>(probe_faces.size());
-
-  if (gallery_face_num == 0 || probe_face_num==0)
-  {
-    std::cout << "Faces are not detected.";
-    return 0;
-  }
-
-  // Detect 5 facial landmarks
-  seeta::FacialLandmark gallery_points[5];
-  point_detector.PointDetectLandmarks(gallery_img_data_gray, gallery_faces[0], gallery_points);
-
-  seeta::FacialLandmark probe_points[5];
-  point_detector.PointDetectLandmarks(probe_img_data_gray, probe_faces[0], probe_points);
-
-  for (int i = 0; i<5; i++)
-  {
-    cv::circle(gallery_img_color, cv::Point(gallery_points[i].x, gallery_points[i].y), 2,
-      CV_RGB(0, 255, 0));
-    cv::circle(probe_img_color, cv::Point(probe_points[i].x, probe_points[i].y), 2,
-      CV_RGB(0, 255, 0));
-  }
-  cv::imwrite("gallery_point_result.jpg", gallery_img_color);
-  cv::imwrite("probe_point_result.jpg", probe_img_color);
-
-  // Extract face identity feature
-  float gallery_fea[2048];
-  float probe_fea[2048];
-  face_recognizer.ExtractFeatureWithCrop(gallery_img_data_color, gallery_points, gallery_fea);
-  face_recognizer.ExtractFeatureWithCrop(probe_img_data_color, probe_points, probe_fea);
-
-  // Caculate similarity of two faces
-  float sim = face_recognizer.CalcSimilarity(gallery_fea, probe_fea);
-  std::cout << sim <<endl;
 
+int main()
+{
   return 0;
-}
-
-
+}
\ No newline at end of file
diff --git a/FaceIdentification/tools/face_identification.cpp b/FaceIdentification/tools/face_identification.cpp
index 24bacd9..ea10795 100644
--- a/FaceIdentification/tools/face_identification.cpp
+++ b/FaceIdentification/tools/face_identification.cpp
@@ -44,6 +44,10 @@ FaceIdentification::FaceIdentification(const char* model_path) {
   recognizer = new Recognizer(model_path);
 }
 
+FaceIdentification::FaceIdentification() {
+  recognizer = new Recognizer(nullptr);
+}
+
 FaceIdentification::~FaceIdentification() {
   delete recognizer;
 }
@@ -112,6 +116,21 @@ uint8_t FaceIdentification::ExtractFeatureWithCrop(const ImageData &src_image,
   return 1;
 }
 
+//LEVENT Update...
+uint8_t FaceIdentification::AllignWithCrop(const ImageData &src_image, 
+    const FacialLandmark* llpoint, 
+    ImageData &dst_img) {
+  float point_data[10];
+  for (int i = 0; i < 5; ++i) {
+	point_data[i * 2] = llpoint[i].x;
+	point_data[i * 2 + 1] = llpoint[i].y;
+  } 
+ 
+  recognizer->AllignWithCrop(src_image, point_data, dst_img);
+  return 1;
+}
+
+
 float FaceIdentification::CalcSimilarity(FaceFeatures const fc1,
     FaceFeatures const fc2,
     long dim) {
