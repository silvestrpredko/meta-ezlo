diff --git a/pusher++/include/pusher++/channel_proxy.hpp b/pusher++/include/pusher++/channel_proxy.hpp
index 45d775a..1624b7a 100644
--- a/pusher++/include/pusher++/channel_proxy.hpp
+++ b/pusher++/include/pusher++/channel_proxy.hpp
@@ -15,6 +15,11 @@ namespace pusher
         using signal_filter = detail::client::signal_filter<std::string(*)(event const&)>;
         signal_filter* signal_filter_;
     public:
+        channel_proxy():
+            signal_filter_(nullptr)
+        {
+
+        }
         explicit channel_proxy(signal_filter* signal_filter) : signal_filter_{signal_filter}
         {}
 
diff --git a/pusher++/include/pusher++/client.hpp b/pusher++/include/pusher++/client.hpp
index f4f59d8..69e7746 100644
--- a/pusher++/include/pusher++/client.hpp
+++ b/pusher++/include/pusher++/client.hpp
@@ -6,6 +6,7 @@
 #ifndef PUSHERPP_CLIENT_HPP
 #define PUSHERPP_CLIENT_HPP
 
+#include <boost/asio/ssl/stream.hpp>
 #include <boost/asio/async_result.hpp>
 #include <boost/asio/connect.hpp>
 #include <boost/asio/buffer.hpp>
@@ -13,6 +14,7 @@
 #include <boost/asio/io_service.hpp>
 #include <boost/asio/ip/tcp.hpp>
 #include <boost/beast/core/flat_buffer.hpp>
+#include <boost/beast/websocket/ssl.hpp>
 #include <boost/beast/websocket.hpp>
 #include <iostream>
 #include <string>
@@ -29,11 +31,14 @@ namespace pusher
     template<typename SocketT>
     class client
     {
+    public:
         using signal_filter = detail::client::signal_filter<std::string(*)(event const&)>;
         boost::beast::websocket::stream<SocketT> socket_;
+        //boost::beast::websocket::stream<boost::asio::ssl::stream<boost::asio::ip::tcp::socket&>> socket_;
         boost::asio::ip::tcp::resolver resolver_;
         std::string host_;
         std::string handshake_resource_;
+        std::string auth_end_point_;
         boost::beast::flat_buffer read_buf_;
         detail::client::signal events_;
         signal_filter filtered_channels_;
@@ -41,16 +46,41 @@ namespace pusher
         signal_filter filtered_events_;
 
     public:
-        client(boost::asio::io_service& ios, std::string key, std::string cluster = "mt1")
+        client(boost::asio::io_service& ios, std::string key, std::string host)
           : socket_{ios}
           , resolver_{ios}
-          , host_{"ws-" + std::move(cluster) + ".pusher.com"}
+          , host_{host}
+          , handshake_resource_{"/app/" + std::move(key) + "?client=pusher++&version=0.01&protocol=7"}
+          , events_{}
+          , filtered_channels_{detail::client::filtered_signal(&detail::client::by_channel)}
+          , filtered_events_{detail::client::filtered_signal(&detail::client::by_name)}
+        {}
+
+        client(boost::asio::io_service& ios, boost::asio::ssl::context& ctx, std::string key, std::string token, std::string host)
+          : socket_{ios, ctx}
+          , resolver_{ios}
+          , host_{host}
           , handshake_resource_{"/app/" + std::move(key) + "?client=pusher++&version=0.01&protocol=7"}
+          , auth_end_point_{"/pusher/auth/?token=" + std::move(token)}
           , events_{}
           , filtered_channels_{detail::client::filtered_signal(&detail::client::by_channel)}
           , filtered_events_{detail::client::filtered_signal(&detail::client::by_name)}
         {}
 
+        ~client()
+        {
+            try
+            {
+                disconnect();
+            }
+            catch(std::exception& except)
+            {
+                std::cout << "Caught exception - " << except.what() << std::endl;
+            }
+
+        }
+
+
         void initialise()
         {
             filtered_channels_.connect_source(events_);
@@ -70,7 +100,7 @@ namespace pusher
                 if(ec)
                     return handler(ec);
 
-                boost::asio::async_connect(socket_.next_layer(), endpoint, [this, handler](auto ec, auto) mutable
+                boost::asio::async_connect(socket_.lowest_layer(), endpoint, [this, handler](auto ec, auto) mutable
                 {
                     if(ec)
                         return handler(ec);
@@ -92,7 +122,8 @@ namespace pusher
         {
             initialise();
 
-            boost::asio::connect(socket_.next_layer(), resolver_.resolve(boost::asio::ip::tcp::resolver::query{host_, "80"}));
+            boost::asio::connect(socket_.lowest_layer(), resolver_.resolve(boost::asio::ip::tcp::resolver::query{host_, "443"}));
+            socket_.next_layer().handshake(boost::asio::ssl::stream_base::client);
             socket_.handshake(host_, handshake_resource_);
 
             read_impl();
@@ -104,7 +135,7 @@ namespace pusher
             socket_.close(boost::beast::websocket::close_code::normal);
         }
 
-        auto channel(std::string const& name)
+        auto channel(std::string const& name, std::string const& token = "", std::string const& channelData = "")
         {
             auto channel_result = filtered_channels_.filtered_.emplace(name, detail::client::signal{});
             auto& channel = channel_result.first->second;
@@ -114,7 +145,7 @@ namespace pusher
             result.first->second.connect_source(channel);
 
             if(inserted)
-                subscribe(name);
+                subscribe(name, token, channelData);
 
             return channel_proxy(&(result.first->second));
         }
@@ -132,9 +163,9 @@ namespace pusher
         }
 
     private:
-        auto subscribe(std::string const& channel)
+        auto subscribe(std::string const& channel, std::string const& token = "", std::string const& channelData = "")
         {
-            socket_.write(boost::asio::buffer(detail::client::make_subscription(channel)));
+            socket_.write(boost::asio::buffer(detail::client::make_subscription(channel, token, channelData)));
         }
 
         void read_impl()
diff --git a/pusher++/include/pusher++/detail/client/write.hpp b/pusher++/include/pusher++/detail/client/write.hpp
index 34359ad..50922ae 100644
--- a/pusher++/include/pusher++/detail/client/write.hpp
+++ b/pusher++/include/pusher++/detail/client/write.hpp
@@ -11,7 +11,7 @@
 
 namespace pusher { namespace detail { namespace client
 {
-    inline std::string make_subscription(std::string const& channel)
+    inline std::string make_subscription(std::string const& channel, std::string const& token, std::string const& channelData)
     {
         rapidjson::StringBuffer sub_buf;
         rapidjson::Writer<rapidjson::StringBuffer> sub_writer(sub_buf);
@@ -21,11 +21,22 @@ namespace pusher { namespace detail { namespace client
         sub_writer.String("data");
         sub_writer.StartObject();
         sub_writer.String("channel");
-        sub_writer.String(channel);
+        sub_writer.String(channel.c_str());
+        if (!token.empty())
+        {
+            sub_writer.String("auth");
+            sub_writer.String(token.c_str());
+        }
+        if (!channelData.empty())
+        {
+            sub_writer.String("channel_data");
+            sub_writer.String(channelData.c_str());
+        }
         sub_writer.EndObject();
         sub_writer.EndObject();
         return {sub_buf.GetString(), sub_buf.GetSize()};
     }
+
 }}} // pusher::detail::client
 
 #endif // PUSHERPP_DETAIL_CLIENT_WRITE_HPP
